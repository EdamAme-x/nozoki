import { getPath } from '../../utils/url.ts';
var LogPrefix;
(function(LogPrefix) {
    LogPrefix["Outgoing"] = '-->';
    LogPrefix["Incoming"] = '<--';
    LogPrefix["Error"] = 'xxx';
})(LogPrefix || (LogPrefix = {}));
const humanize = (times)=>{
    const [delimiter, separator] = [
        ',',
        '.'
    ];
    const orderTimes = times.map((v)=>v.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + delimiter));
    return orderTimes.join(separator);
};
const time = (start)=>{
    const delta = Date.now() - start;
    return humanize([
        delta < 1000 ? delta + 'ms' : Math.round(delta / 1000) + 's'
    ]);
};
const colorStatus = (status)=>{
    const out = {
        7: `\x1b[35m${status}\x1b[0m`,
        5: `\x1b[31m${status}\x1b[0m`,
        4: `\x1b[33m${status}\x1b[0m`,
        3: `\x1b[36m${status}\x1b[0m`,
        2: `\x1b[32m${status}\x1b[0m`,
        1: `\x1b[32m${status}\x1b[0m`,
        0: `\x1b[33m${status}\x1b[0m`
    };
    const calculateStatus = status / 100 | 0;
    return out[calculateStatus];
};
function log(fn, prefix, method, path, status = 0, elapsed) {
    const out = prefix === LogPrefix.Incoming ? `  ${prefix} ${method} ${path}` : `  ${prefix} ${method} ${path} ${colorStatus(status)} ${elapsed}`;
    fn(out);
}
export const logger = (fn = console.log)=>{
    return async (c, next)=>{
        const { method  } = c.req;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const path = getPath(c.req.raw);
        log(fn, LogPrefix.Incoming, method, path);
        const start = Date.now();
        await next();
        log(fn, LogPrefix.Outgoing, method, path, c.res.status, time(start));
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaG9ub0B2My4yLjcvbWlkZGxld2FyZS9sb2dnZXIvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBNaWRkbGV3YXJlSGFuZGxlciB9IGZyb20gJy4uLy4uL3R5cGVzLnRzJ1xuaW1wb3J0IHsgZ2V0UGF0aCB9IGZyb20gJy4uLy4uL3V0aWxzL3VybC50cydcblxuZW51bSBMb2dQcmVmaXgge1xuICBPdXRnb2luZyA9ICctLT4nLFxuICBJbmNvbWluZyA9ICc8LS0nLFxuICBFcnJvciA9ICd4eHgnLFxufVxuXG5jb25zdCBodW1hbml6ZSA9ICh0aW1lczogc3RyaW5nW10pID0+IHtcbiAgY29uc3QgW2RlbGltaXRlciwgc2VwYXJhdG9yXSA9IFsnLCcsICcuJ11cblxuICBjb25zdCBvcmRlclRpbWVzID0gdGltZXMubWFwKCh2KSA9PiB2LnJlcGxhY2UoLyhcXGQpKD89KFxcZFxcZFxcZCkrKD8hXFxkKSkvZywgJyQxJyArIGRlbGltaXRlcikpXG5cbiAgcmV0dXJuIG9yZGVyVGltZXMuam9pbihzZXBhcmF0b3IpXG59XG5cbmNvbnN0IHRpbWUgPSAoc3RhcnQ6IG51bWJlcikgPT4ge1xuICBjb25zdCBkZWx0YSA9IERhdGUubm93KCkgLSBzdGFydFxuICByZXR1cm4gaHVtYW5pemUoW2RlbHRhIDwgMTAwMCA/IGRlbHRhICsgJ21zJyA6IE1hdGgucm91bmQoZGVsdGEgLyAxMDAwKSArICdzJ10pXG59XG5cbmNvbnN0IGNvbG9yU3RhdHVzID0gKHN0YXR1czogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IG91dDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgICA3OiBgXFx4MWJbMzVtJHtzdGF0dXN9XFx4MWJbMG1gLFxuICAgIDU6IGBcXHgxYlszMW0ke3N0YXR1c31cXHgxYlswbWAsXG4gICAgNDogYFxceDFiWzMzbSR7c3RhdHVzfVxceDFiWzBtYCxcbiAgICAzOiBgXFx4MWJbMzZtJHtzdGF0dXN9XFx4MWJbMG1gLFxuICAgIDI6IGBcXHgxYlszMm0ke3N0YXR1c31cXHgxYlswbWAsXG4gICAgMTogYFxceDFiWzMybSR7c3RhdHVzfVxceDFiWzBtYCxcbiAgICAwOiBgXFx4MWJbMzNtJHtzdGF0dXN9XFx4MWJbMG1gLFxuICB9XG5cbiAgY29uc3QgY2FsY3VsYXRlU3RhdHVzID0gKHN0YXR1cyAvIDEwMCkgfCAwXG5cbiAgcmV0dXJuIG91dFtjYWxjdWxhdGVTdGF0dXNdXG59XG5cbnR5cGUgUHJpbnRGdW5jID0gKHN0cjogc3RyaW5nLCAuLi5yZXN0OiBzdHJpbmdbXSkgPT4gdm9pZFxuXG5mdW5jdGlvbiBsb2coXG4gIGZuOiBQcmludEZ1bmMsXG4gIHByZWZpeDogc3RyaW5nLFxuICBtZXRob2Q6IHN0cmluZyxcbiAgcGF0aDogc3RyaW5nLFxuICBzdGF0dXM6IG51bWJlciA9IDAsXG4gIGVsYXBzZWQ/OiBzdHJpbmdcbikge1xuICBjb25zdCBvdXQgPVxuICAgIHByZWZpeCA9PT0gTG9nUHJlZml4LkluY29taW5nXG4gICAgICA/IGAgICR7cHJlZml4fSAke21ldGhvZH0gJHtwYXRofWBcbiAgICAgIDogYCAgJHtwcmVmaXh9ICR7bWV0aG9kfSAke3BhdGh9ICR7Y29sb3JTdGF0dXMoc3RhdHVzKX0gJHtlbGFwc2VkfWBcbiAgZm4ob3V0KVxufVxuXG5leHBvcnQgY29uc3QgbG9nZ2VyID0gKGZuOiBQcmludEZ1bmMgPSBjb25zb2xlLmxvZyk6IE1pZGRsZXdhcmVIYW5kbGVyID0+IHtcbiAgcmV0dXJuIGFzeW5jIChjLCBuZXh0KSA9PiB7XG4gICAgY29uc3QgeyBtZXRob2QgfSA9IGMucmVxXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIGNvbnN0IHBhdGggPSBnZXRQYXRoKGMucmVxLnJhdylcblxuICAgIGxvZyhmbiwgTG9nUHJlZml4LkluY29taW5nLCBtZXRob2QsIHBhdGgpXG5cbiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KClcblxuICAgIGF3YWl0IG5leHQoKVxuXG4gICAgbG9nKGZuLCBMb2dQcmVmaXguT3V0Z29pbmcsIG1ldGhvZCwgcGF0aCwgYy5yZXMuc3RhdHVzLCB0aW1lKHN0YXJ0KSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMsT0FBTyxRQUFRLHFCQUFvQjtJQUU1QztVQUFLLFNBQVM7SUFBVCxVQUNILGNBQVc7SUFEUixVQUVILGNBQVc7SUFGUixVQUdILFdBQVE7R0FITCxjQUFBO0FBTUwsTUFBTSxXQUFXLENBQUMsUUFBb0I7SUFDcEMsTUFBTSxDQUFDLFdBQVcsVUFBVSxHQUFHO1FBQUM7UUFBSztLQUFJO0lBRXpDLE1BQU0sYUFBYSxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQU0sRUFBRSxPQUFPLENBQUMsNEJBQTRCLE9BQU87SUFFakYsT0FBTyxXQUFXLElBQUksQ0FBQztBQUN6QjtBQUVBLE1BQU0sT0FBTyxDQUFDLFFBQWtCO0lBQzlCLE1BQU0sUUFBUSxLQUFLLEdBQUcsS0FBSztJQUMzQixPQUFPLFNBQVM7UUFBQyxRQUFRLE9BQU8sUUFBUSxPQUFPLEtBQUssS0FBSyxDQUFDLFFBQVEsUUFBUSxHQUFHO0tBQUM7QUFDaEY7QUFFQSxNQUFNLGNBQWMsQ0FBQyxTQUFtQjtJQUN0QyxNQUFNLE1BQWlDO1FBQ3JDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxPQUFPLENBQUM7UUFDN0IsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLE9BQU8sQ0FBQztRQUM3QixHQUFHLENBQUMsUUFBUSxFQUFFLE9BQU8sT0FBTyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxPQUFPLENBQUM7UUFDN0IsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLE9BQU8sQ0FBQztRQUM3QixHQUFHLENBQUMsUUFBUSxFQUFFLE9BQU8sT0FBTyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxPQUFPLENBQUM7SUFDL0I7SUFFQSxNQUFNLGtCQUFrQixBQUFDLFNBQVMsTUFBTztJQUV6QyxPQUFPLEdBQUcsQ0FBQyxnQkFBZ0I7QUFDN0I7QUFJQSxTQUFTLElBQ1AsRUFBYSxFQUNiLE1BQWMsRUFDZCxNQUFjLEVBQ2QsSUFBWSxFQUNaLFNBQWlCLENBQUMsRUFDbEIsT0FBZ0IsRUFDaEI7SUFDQSxNQUFNLE1BQ0osV0FBVyxVQUFVLFFBQVEsR0FDekIsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQy9CLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLFlBQVksUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDO0lBQ3ZFLEdBQUc7QUFDTDtBQUVBLE9BQU8sTUFBTSxTQUFTLENBQUMsS0FBZ0IsUUFBUSxHQUFHLEdBQXdCO0lBQ3hFLE9BQU8sT0FBTyxHQUFHLE9BQVM7UUFDeEIsTUFBTSxFQUFFLE9BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRztRQUN4Qiw2REFBNkQ7UUFDN0QsTUFBTSxPQUFPLFFBQVEsRUFBRSxHQUFHLENBQUMsR0FBRztRQUU5QixJQUFJLElBQUksVUFBVSxRQUFRLEVBQUUsUUFBUTtRQUVwQyxNQUFNLFFBQVEsS0FBSyxHQUFHO1FBRXRCLE1BQU07UUFFTixJQUFJLElBQUksVUFBVSxRQUFRLEVBQUUsUUFBUSxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLO0lBQy9EO0FBQ0YsRUFBQyJ9