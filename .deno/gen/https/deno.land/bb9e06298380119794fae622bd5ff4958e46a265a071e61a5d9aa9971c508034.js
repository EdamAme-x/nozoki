import { sha256 } from './crypto.ts';
export const equal = (a, b)=>{
    if (a === b) {
        return true;
    }
    if (a.byteLength !== b.byteLength) {
        return false;
    }
    const va = new DataView(a);
    const vb = new DataView(b);
    let i = va.byteLength;
    while(i--){
        if (va.getUint8(i) !== vb.getUint8(i)) {
            return false;
        }
    }
    return true;
};
export const timingSafeEqual = async (a, b, hashFunction)=>{
    if (!hashFunction) {
        hashFunction = sha256;
    }
    const sa = await hashFunction(a);
    const sb = await hashFunction(b);
    if (!sa || !sb) {
        return false;
    }
    return sa === sb && a === b;
};
export const bufferToString = (buffer)=>{
    if (buffer instanceof ArrayBuffer) {
        const enc = new TextDecoder('utf-8');
        return enc.decode(buffer);
    }
    return buffer;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaG9ub0B2My4yLjcvdXRpbHMvYnVmZmVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNoYTI1NiB9IGZyb20gJy4vY3J5cHRvLnRzJ1xuXG5leHBvcnQgY29uc3QgZXF1YWwgPSAoYTogQXJyYXlCdWZmZXIsIGI6IEFycmF5QnVmZmVyKSA9PiB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGNvbnN0IHZhID0gbmV3IERhdGFWaWV3KGEpXG4gIGNvbnN0IHZiID0gbmV3IERhdGFWaWV3KGIpXG5cbiAgbGV0IGkgPSB2YS5ieXRlTGVuZ3RoXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAodmEuZ2V0VWludDgoaSkgIT09IHZiLmdldFVpbnQ4KGkpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgY29uc3QgdGltaW5nU2FmZUVxdWFsID0gYXN5bmMgKFxuICBhOiBzdHJpbmcgfCBvYmplY3QgfCBib29sZWFuLFxuICBiOiBzdHJpbmcgfCBvYmplY3QgfCBib29sZWFuLFxuICBoYXNoRnVuY3Rpb24/OiBGdW5jdGlvblxuKSA9PiB7XG4gIGlmICghaGFzaEZ1bmN0aW9uKSB7XG4gICAgaGFzaEZ1bmN0aW9uID0gc2hhMjU2XG4gIH1cblxuICBjb25zdCBzYSA9IGF3YWl0IGhhc2hGdW5jdGlvbihhKVxuICBjb25zdCBzYiA9IGF3YWl0IGhhc2hGdW5jdGlvbihiKVxuXG4gIGlmICghc2EgfHwgIXNiKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gc2EgPT09IHNiICYmIGEgPT09IGJcbn1cblxuZXhwb3J0IGNvbnN0IGJ1ZmZlclRvU3RyaW5nID0gKGJ1ZmZlcjogQXJyYXlCdWZmZXIpOiBzdHJpbmcgPT4ge1xuICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICBjb25zdCBlbmMgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi04JylcbiAgICByZXR1cm4gZW5jLmRlY29kZShidWZmZXIpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsTUFBTSxRQUFRLGNBQWE7QUFFcEMsT0FBTyxNQUFNLFFBQVEsQ0FBQyxHQUFnQixJQUFtQjtJQUN2RCxJQUFJLE1BQU0sR0FBRztRQUNYLE9BQU8sSUFBSTtJQUNiLENBQUM7SUFDRCxJQUFJLEVBQUUsVUFBVSxLQUFLLEVBQUUsVUFBVSxFQUFFO1FBQ2pDLE9BQU8sS0FBSztJQUNkLENBQUM7SUFFRCxNQUFNLEtBQUssSUFBSSxTQUFTO0lBQ3hCLE1BQU0sS0FBSyxJQUFJLFNBQVM7SUFFeEIsSUFBSSxJQUFJLEdBQUcsVUFBVTtJQUNyQixNQUFPLElBQUs7UUFDVixJQUFJLEdBQUcsUUFBUSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSTtZQUNyQyxPQUFPLEtBQUs7UUFDZCxDQUFDO0lBQ0g7SUFFQSxPQUFPLElBQUk7QUFDYixFQUFDO0FBRUQsT0FBTyxNQUFNLGtCQUFrQixPQUM3QixHQUNBLEdBQ0EsZUFDRztJQUNILElBQUksQ0FBQyxjQUFjO1FBQ2pCLGVBQWU7SUFDakIsQ0FBQztJQUVELE1BQU0sS0FBSyxNQUFNLGFBQWE7SUFDOUIsTUFBTSxLQUFLLE1BQU0sYUFBYTtJQUU5QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUk7UUFDZCxPQUFPLEtBQUs7SUFDZCxDQUFDO0lBRUQsT0FBTyxPQUFPLE1BQU0sTUFBTTtBQUM1QixFQUFDO0FBRUQsT0FBTyxNQUFNLGlCQUFpQixDQUFDLFNBQWdDO0lBQzdELElBQUksa0JBQWtCLGFBQWE7UUFDakMsTUFBTSxNQUFNLElBQUksWUFBWTtRQUM1QixPQUFPLElBQUksTUFBTSxDQUFDO0lBQ3BCLENBQUM7SUFDRCxPQUFPO0FBQ1QsRUFBQyJ9